{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport cors from 'cors';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport { PrismaClient } from '@prisma/client';\n\nconst app = express();\napp.use(cors({ origin: '*' }));\napp.use(express.json({ limit: '10mb' }));\n\nconst httpServer = createServer(app);\nconst io = new Server(httpServer, { cors: { origin: '*' } });\n\nconst prisma = new PrismaClient();\n\napp.get('/health', (_req, res) => {\n  res.json({ ok: true, service: 'rob04-server' });\n});\n\napp.post('/users', async (req, res) => {\n  const { email, displayName } = req.body as { email: string; displayName: string };\n  try {\n    let user = await prisma.user.findUnique({ where: { email } });\n    if (!user) {\n      user = await prisma.user.create({ data: { email, displayName } });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Failed to upsert user' });\n  }\n});\n\nio.on('connection', (socket) => {\n  socket.on('join', (chatId: string) => {\n    socket.join(chatId);\n  });\n\n  socket.on('message', async (msg: any) => {\n    try {\n      const saved = await prisma.message.create({\n        data: {\n          id: msg.id,\n          chatId: msg.chatId,\n          senderId: msg.senderId,\n          type: msg.type,\n          text: msg.text,\n          mediaUrl: msg.mediaUrl,\n        },\n      });\n      io.to(msg.chatId).emit('message', { ...msg, createdAt: saved.createdAt.toISOString() });\n    } catch (error) {\n      console.error('Failed to persist message', error);\n    }\n  });\n\n  socket.on('call:signal', (payload: any) => {\n    io.to(payload.chatId).emit('call:signal', payload);\n  });\n});\n\nconst port = process.env.PORT || 4000;\nhttpServer.listen(port, () => {\n  console.log(`rob04 server listening on ${port}`);\n});"],"mappings":";AAAA,OAAO;AACP,OAAO,aAAa;AACpB,OAAO,UAAU;AACjB,SAAS,oBAAoB;AAC7B,SAAS,cAAc;AACvB,SAAS,oBAAoB;AAE7B,IAAM,MAAM,QAAQ;AACpB,IAAI,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,CAAC;AAC7B,IAAI,IAAI,QAAQ,KAAK,EAAE,OAAO,OAAO,CAAC,CAAC;AAEvC,IAAM,aAAa,aAAa,GAAG;AACnC,IAAM,KAAK,IAAI,OAAO,YAAY,EAAE,MAAM,EAAE,QAAQ,IAAI,EAAE,CAAC;AAE3D,IAAM,SAAS,IAAI,aAAa;AAEhC,IAAI,IAAI,WAAW,CAAC,MAAM,QAAQ;AAChC,MAAI,KAAK,EAAE,IAAI,MAAM,SAAS,eAAe,CAAC;AAChD,CAAC;AAED,IAAI,KAAK,UAAU,OAAO,KAAK,QAAQ;AACrC,QAAM,EAAE,OAAO,YAAY,IAAI,IAAI;AACnC,MAAI;AACF,QAAI,OAAO,MAAM,OAAO,KAAK,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAC5D,QAAI,CAAC,MAAM;AACT,aAAO,MAAM,OAAO,KAAK,OAAO,EAAE,MAAM,EAAE,OAAO,YAAY,EAAE,CAAC;AAAA,IAClE;AACA,QAAI,KAAK,IAAI;AAAA,EACf,SAAS,OAAO;AACd,YAAQ,MAAM,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,EACzD;AACF,CAAC;AAED,GAAG,GAAG,cAAc,CAAC,WAAW;AAC9B,SAAO,GAAG,QAAQ,CAAC,WAAmB;AACpC,WAAO,KAAK,MAAM;AAAA,EACpB,CAAC;AAED,SAAO,GAAG,WAAW,OAAO,QAAa;AACvC,QAAI;AACF,YAAM,QAAQ,MAAM,OAAO,QAAQ,OAAO;AAAA,QACxC,MAAM;AAAA,UACJ,IAAI,IAAI;AAAA,UACR,QAAQ,IAAI;AAAA,UACZ,UAAU,IAAI;AAAA,UACd,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,UAAU,IAAI;AAAA,QAChB;AAAA,MACF,CAAC;AACD,SAAG,GAAG,IAAI,MAAM,EAAE,KAAK,WAAW,EAAE,GAAG,KAAK,WAAW,MAAM,UAAU,YAAY,EAAE,CAAC;AAAA,IACxF,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,KAAK;AAAA,IAClD;AAAA,EACF,CAAC;AAED,SAAO,GAAG,eAAe,CAAC,YAAiB;AACzC,OAAG,GAAG,QAAQ,MAAM,EAAE,KAAK,eAAe,OAAO;AAAA,EACnD,CAAC;AACH,CAAC;AAED,IAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,WAAW,OAAO,MAAM,MAAM;AAC5B,UAAQ,IAAI,6BAA6B,IAAI,EAAE;AACjD,CAAC;","names":[]}